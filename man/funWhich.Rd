% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/functionInfo.R
\name{funWhich}
\alias{funWhich}
\title{get the dispatched S3 or S4 method of a function}
\usage{
funWhich(f, object, returnAll = FALSE, envir = topenv(parent.frame()))
}
\arguments{
\item{f}{function or function name.}

\item{object}{the object that the function f is processing.}

\item{returnAll}{Whether all possibly existed \code{origin}al functions 
\code{S3} method and \code{S4} method are returned as a list. The default
is FALSE, meaning returning \code{S3} method first if exists, followed by 
\code{S4} method if exists while \code{S3} method not exists. If both 
\code{S3} and \code{S4} methods do not exist, \code{origin}al function 
appears to be not a generic function so the \code{origin}al source is
returned.}

\item{envir}{the working environment.}
}
\value{
either a list of length 3, containing \code{origin}al function,
\code{S3} method and \code{S4} method, or a function object.
}
\description{
get the dispatched S3 or S4 method of a function
}
\examples{
\dontrun{
# print from base package is a S3 generic
detachPackages("Matrix")
funWhich(print, "asdfasdfasd", TRUE)
funWhich(print, "asdfasdfasd")

library(Matrix) # print becomes a S4 standardGeneric
funWhich(print, "asdfasdfasd", TRUE)
funWhich(print, "asdfasdfasd") # if S3 and S4 both exists, then S3 is shown.

fit <- lm(Sepal.Length ~ Petal.Length + Petal.Width + Species, 
          data = datasets::iris)
resFun = funWhich(print, fit)
resFun
resFun(fit)
stats:::print.lm(fit)

funWhich(show, object = ~ a + b, T)
funWhich(show, object = ~ a + b)
funWhich(showDefault, object = ~ a + b)

x = show
funWhich(x, object = ~ a + b, T)
funWhich(x, object = ~ a + b)
xw = funWhich("x", object = ~ a + b)
xw
attributes(xw)
}
}
